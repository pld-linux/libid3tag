ID3 v2.3 support taken from modified libid3tag included in audacity sources
updated for 0.15.1b (s/id3_crc_calculate/id3_crc_compute/)
diff -Nur libid3tag-0.15.0b/frame.c audacity-src-1.2.0-pre2/lib-src/libid3tag/frame.c
--- libid3tag-0.15.0b/frame.c	2003-04-19 02:14:33.000000000 +0200
+++ audacity-src-1.2.0-pre2/lib-src/libid3tag/frame.c	2003-09-29 08:51:28.000000000 +0200
@@ -539,8 +539,12 @@
 
   if (flags & (ID3_FRAME_FLAG_FORMATFLAGS & ~ID3_FRAME_FLAG_KNOWNFLAGS)) {
     size += id3_render_binary(ptr, frame->encoded, frame->encoded_length);
-    if (size_ptr)
-      id3_render_syncsafe(&size_ptr, size - 10, 4);
+    if (size_ptr) {
+      if (options & ID3_TAG_OPTION_ID3V2_3)
+        id3_render_int(&size_ptr, size - 10, 4);
+      else
+        id3_render_syncsafe(&size_ptr, size - 10, 4);
+    }
 
     return size;
   }
@@ -557,10 +561,14 @@
       flags |= ID3_FRAME_FLAG_COMPRESSION | ID3_FRAME_FLAG_DATALENGTHINDICATOR;
   }
 
-  if (flags & ID3_FRAME_FLAG_GROUPINGIDENTITY)
+  if (flags & ID3_FRAME_FLAG_GROUPINGIDENTITY) {
     size += id3_render_int(ptr, frame->group_id, 1);
-  if (flags & ID3_FRAME_FLAG_ENCRYPTION)
+  }
+
+  if (flags & ID3_FRAME_FLAG_ENCRYPTION) {
     size += id3_render_int(ptr, frame->encryption_method, 1);
+  }
+
   if (flags & ID3_FRAME_FLAG_DATALENGTHINDICATOR) {
     if (flags & ID3_FRAME_FLAG_ENCRYPTION)
       decoded_length = frame->decoded_length;
@@ -617,8 +625,12 @@
 
   /* patch size and flags */
 
-  if (size_ptr)
-    id3_render_syncsafe(&size_ptr, size - 10, 4);
+  if (size_ptr) {
+    if (options & ID3_TAG_OPTION_ID3V2_3)
+      id3_render_int(&size_ptr, size - 10, 4);
+    else
+      id3_render_syncsafe(&size_ptr, size - 10, 4);
+  }
   if (flags_ptr)
     id3_render_int(&flags_ptr, flags, 2);
 
diff -Nur libid3tag-0.15.0b/id3tag.h audacity-src-1.2.0-pre2/lib-src/libid3tag/id3tag.h
--- libid3tag-0.15.0b/id3tag.h	2003-05-29 06:23:59.000000000 +0200
+++ audacity-src-1.2.0-pre2/lib-src/libid3tag/id3tag.h	2003-09-29 08:51:28.000000000 +0200
@@ -139,7 +139,8 @@
   ID3_TAG_OPTION_APPENDEDTAG       = 0x0010,	/* tag will be appended */
   ID3_TAG_OPTION_FILEALTERED       = 0x0020,	/* audio data was altered */
 
-  ID3_TAG_OPTION_ID3V1             = 0x0100	/* render ID3v1/ID3v1.1 tag */
+  ID3_TAG_OPTION_ID3V1             = 0x0100,/* render ID3v1/ID3v1.1 tag */
+  ID3_TAG_OPTION_ID3V2_3           = 0x0200  /* render ID3v2.3 tag */
 };
 
 struct id3_frame {
diff -Nur libid3tag-0.15.0b/tag.c audacity-src-1.2.0-pre2/lib-src/libid3tag/tag.c
--- libid3tag-0.15.0b/tag.c	2003-04-19 02:14:33.000000000 +0200
+++ audacity-src-1.2.0-pre2/lib-src/libid3tag/tag.c	2003-09-29 08:51:28.000000000 +0200
@@ -762,6 +762,155 @@
 }
 
 /*
+ * NAME:	v2_3_render()
+ * DESCRIPTION:	render a v2.3 ID3 tag for compatibility
+ * AUTHOR: Dominic Mazzoni
+ */
+
+#define ID3V2_3_TAG_VERSION 0x0300
+#define ID3V2_3_TAG_FLAG_KNOWNFLAGS 0xc0
+
+id3_length_t v2_3_render(struct id3_tag const *tag, id3_byte_t *buffer)
+{
+  id3_length_t size = 0;
+  id3_byte_t **ptr,
+    *header_ptr = 0, *tagsize_ptr = 0, *crc_ptr = 0, *frames_ptr = 0;
+  int flags, extendedflags;
+  unsigned int i;
+
+  assert(tag);
+
+  /* a tag must contain at least one (renderable) frame */
+
+  for (i = 0; i < tag->nframes; ++i) {
+    if (id3_frame_render(tag->frames[i], 0, 0) > 0)
+      break;
+  }
+
+  if (i == tag->nframes)
+    return 0;
+
+  ptr = buffer ? &buffer : 0;
+
+  /* get flags */
+
+  flags         = tag->flags         & ID3V2_3_TAG_FLAG_KNOWNFLAGS;
+  extendedflags = tag->extendedflags & ID3_TAG_EXTENDEDFLAG_KNOWNFLAGS;
+
+  extendedflags &= ~ID3_TAG_EXTENDEDFLAG_CRCDATAPRESENT;
+  if (tag->options & ID3_TAG_OPTION_CRC)
+    extendedflags |= ID3_TAG_EXTENDEDFLAG_CRCDATAPRESENT;
+
+  extendedflags &= ~ID3_TAG_EXTENDEDFLAG_TAGRESTRICTIONS;
+  if (tag->restrictions)
+    extendedflags |= ID3_TAG_EXTENDEDFLAG_TAGRESTRICTIONS;
+
+
+  extendedflags = 0;
+
+
+  flags &= ~ID3_TAG_FLAG_UNSYNCHRONISATION;
+  if (tag->options & ID3_TAG_OPTION_UNSYNCHRONISATION)
+    flags |= ID3_TAG_FLAG_UNSYNCHRONISATION;
+
+  flags &= ~ID3_TAG_FLAG_EXTENDEDHEADER;
+  if (extendedflags)
+    flags |= ID3_TAG_FLAG_EXTENDEDHEADER;
+
+  /* header */
+
+  if (ptr)
+    header_ptr = *ptr;
+
+  size += id3_render_immediate(ptr, "ID3", 3);
+  size += id3_render_int(ptr, ID3V2_3_TAG_VERSION, 2);
+  size += id3_render_int(ptr, flags, 1);
+
+  if (ptr)
+    tagsize_ptr = *ptr;
+
+  size += id3_render_syncsafe(ptr, 0, 4);
+
+  /* extended header */
+
+  if (flags & ID3_TAG_FLAG_EXTENDEDHEADER) {
+    id3_length_t ehsize = 0;
+    id3_byte_t *ehsize_ptr = 0;
+
+    if (ptr)
+      ehsize_ptr = *ptr;
+
+    ehsize += id3_render_syncsafe(ptr, 0, 4);
+    ehsize += id3_render_int(ptr, 1, 1);
+    ehsize += id3_render_int(ptr, extendedflags, 1);
+
+    if (extendedflags & ID3_TAG_EXTENDEDFLAG_TAGISANUPDATE)
+      ehsize += id3_render_int(ptr, 0, 1);
+
+    if (extendedflags & ID3_TAG_EXTENDEDFLAG_CRCDATAPRESENT) {
+      ehsize += id3_render_int(ptr, 5, 1);
+
+      if (ptr)
+        crc_ptr = *ptr;
+
+      ehsize += id3_render_syncsafe(ptr, 0, 5);
+    }
+
+    if (extendedflags & ID3_TAG_EXTENDEDFLAG_TAGRESTRICTIONS) {
+      ehsize += id3_render_int(ptr, 1, 1);
+      ehsize += id3_render_int(ptr, tag->restrictions, 1);
+    }
+
+    if (ehsize_ptr)
+      id3_render_syncsafe(&ehsize_ptr, ehsize, 4);
+
+    size += ehsize;
+  }
+
+  /* frames */
+
+  if (ptr)
+    frames_ptr = *ptr;
+
+  for (i = 0; i < tag->nframes; ++i)
+    size += id3_frame_render(tag->frames[i], ptr, tag->options);
+
+  /* padding */
+
+  if (!(flags & ID3_TAG_FLAG_FOOTERPRESENT)) {
+    if (size < tag->paddedsize)
+      size += id3_render_padding(ptr, 0, tag->paddedsize - size);
+    else if (tag->options & ID3_TAG_OPTION_UNSYNCHRONISATION) {
+      if (ptr == 0)
+	size += 1;
+      else {
+	if ((*ptr)[-1] == 0xff)
+	  size += id3_render_padding(ptr, 0, 1);
+      }
+    }
+  }
+
+  /* patch tag size and CRC */
+
+  if (tagsize_ptr)
+    id3_render_syncsafe(&tagsize_ptr, size - 10, 4);
+
+  if (crc_ptr) {
+    id3_render_syncsafe(&crc_ptr,
+			id3_crc_compute(frames_ptr, *ptr - frames_ptr), 5);
+  }
+
+  /* footer */
+
+  if (flags & ID3_TAG_FLAG_FOOTERPRESENT) {
+    size += id3_render_immediate(ptr, "3DI", 3);
+    size += id3_render_binary(ptr, header_ptr + 3, 7);
+  }
+
+  return size;
+}
+
+/*
  * NAME:	tag->render()
  * DESCRIPTION:	render a complete ID3 tag
  */
@@ -778,6 +927,9 @@
   if (tag->options & ID3_TAG_OPTION_ID3V1)
     return v1_render(tag, buffer);
 
+  if (tag->options & ID3_TAG_OPTION_ID3V2_3)
+    return v2_3_render(tag, buffer);
+
   /* a tag must contain at least one (renderable) frame */
 
   for (i = 0; i < tag->nframes; ++i) {
@@ -849,7 +1001,7 @@
       ehsize += id3_render_int(ptr, 5, 1);
 
       if (ptr)
-	crc_ptr = *ptr;
+        crc_ptr = *ptr;
 
       ehsize += id3_render_syncsafe(ptr, 0, 5);
     }
